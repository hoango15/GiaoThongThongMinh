import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk
import traceback, math
from datetime import datetime
import threading

from database import (
    can_vehicle_enter, update_vehicle_count, get_current_count,
    insert_vehicle, update_vehicle_exit, find_vehicle_by_ticket, find_vehicle_by_plate
)
from IdentifiedViaCamera import recognize_license_plate_from_camera

# ================== Entry Window ==================
class EntryWindow(tk.Toplevel):
    def __init__(self, root):
        super().__init__(root)
        self.title("Xe V√†o")
        self.geometry("900x600")
        self.video_label = None
        self.detected_plate = None
        self.vehicle_img_path = None
        self.plate_img_path = None
        self.stop_event = threading.Event()
        self.create_widgets()

    def create_widgets(self):
        left = tk.Frame(self)
        left.pack(side="left", padx=10, pady=10, fill="y")

        self.video_label = tk.Label(self)
        self.video_label.pack(side="left", padx=10, pady=10)

        self.status_var = tk.StringVar(value="Ch∆∞a nh·∫≠n di·ªán")
        tk.Label(left, textvariable=self.status_var, fg="blue").pack(pady=5)

        tk.Button(left, text="‚èπ D·ª™NG", bg="red", fg="white",
                  command=lambda: self.stop_event.set()).pack(fill="x", pady=5)
        tk.Button(left, text="‚úÖ X√ÅC NH·∫¨N L∆ØU", bg="green", fg="white",
                  command=self.confirm_save).pack(fill="x", pady=5)
        tk.Button(left, text="‚ùå THO√ÅT", bg="gray", fg="white",
                  command=self.destroy).pack(fill="x", pady=5)

        recognize_license_plate_from_camera(self, mode="in", stop_event=self.stop_event)

    def update_detected(self, plate, vpath, ppath):
        self.detected_plate = plate
        self.vehicle_img_path = vpath
        self.plate_img_path = ppath
        self.status_var.set(f"Nh·∫≠n di·ªán: {plate}")

    def confirm_save(self):
        if not self.detected_plate:
            messagebox.showerror("L·ªói", "Ch∆∞a c√≥ bi·ªÉn s·ªë!")
            return
        if not can_vehicle_enter():
            messagebox.showwarning("ƒê·∫ßy b√£i", "Kh√¥ng th·ªÉ cho xe v√†o, b√£i ƒë√£ ƒë·∫ßy")
            return
        try:
            ticket_code = f"T{int(datetime.now().timestamp())}"
            insert_vehicle(self.detected_plate, ticket_code, self.vehicle_img_path, self.plate_img_path)
            update_vehicle_count(1)
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ l∆∞u xe {self.detected_plate}, m√£ v√©: {ticket_code}")
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("L·ªói DB", str(e))

# ================== Exit Window ==================
class ExitWindow(tk.Toplevel):
    def __init__(self, root):
        super().__init__(root)
        self.title("Xe Ra")
        self.geometry("900x600")
        self.video_label = None
        self.detected_plate = None
        self.stop_event = threading.Event()
        self.create_widgets()

    def create_widgets(self):
        left = tk.Frame(self)
        left.pack(side="left", padx=10, pady=10, fill="y")

        self.video_label = tk.Label(self)
        self.video_label.pack(side="left", padx=10, pady=10)

        self.ticket_var = tk.StringVar()
        tk.Entry(left, textvariable=self.ticket_var).pack(pady=5)

        self.info_text = tk.Label(left, text="", fg="blue")
        self.info_text.pack(pady=5)

        tk.Button(left, text="‚èπ D·ª™NG", bg="red", fg="white",
                  command=lambda: self.stop_event.set()).pack(fill="x", pady=5)
        tk.Button(left, text="‚úÖ X√ÅC NH·∫¨N XE RA", bg="green", fg="white",
                  command=self.confirm_exit).pack(fill="x", pady=5)
        tk.Button(left, text="‚ùå THO√ÅT", bg="gray", fg="white",
                  command=self.destroy).pack(fill="x", pady=5)

        recognize_license_plate_from_camera(self, mode="out", stop_event=self.stop_event)

    def update_detected(self, plate, vpath, ppath):
        self.detected_plate = plate
        self.info_text.config(text=f"Nh·∫≠n di·ªán: {plate}")

    def confirm_exit(self):
        ticket_code = self.ticket_var.get().strip()
        if not ticket_code:
            messagebox.showerror("L·ªói", "C·∫ßn nh·∫≠p m√£ v√© ƒë·ªÉ x√°c nh·∫≠n xe ra")
            return
        try:
            row = find_vehicle_by_ticket(ticket_code)
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("L·ªói DB", f"L·ªói khi truy v·∫•n v√©: {e}")
            return
        if not row:
            messagebox.showerror("Sai m√£ v√©", f"Kh√¥ng t√¨m th·∫•y v√© {ticket_code}")
            return

        db_plate = row["license_plate"]
        time_in = row["time_in"]

        if db_plate == self.detected_plate:
            try:
                now = datetime.now()
                duration = (now - time_in).total_seconds() / 3600
                hours = math.ceil(duration)
                fee = hours * 5000

                update_vehicle_exit(ticket_code, fee)
                update_vehicle_count(-1)

                self.info_text.config(text=f"Xe ra!\nBi·ªÉn s·ªë: {self.detected_plate}\nM√£ v√©: {ticket_code}\nPh√≠: {fee} VND")
                messagebox.showinfo("Th√†nh c√¥ng", f"Xe ra h·ª£p l·ªá!\nChi ph√≠: {fee} VND")
            except Exception as e:
                traceback.print_exc()
                messagebox.showerror("L·ªói", f"C·∫≠p nh·∫≠t DB th·∫•t b·∫°i: {e}")
        else:
            messagebox.showerror("Sai bi·ªÉn s·ªë", "Bi·ªÉn s·ªë kh√¥ng kh·ªõp v·ªõi v√©!")

# ================== Search Window ==================
class SearchWindow(tk.Toplevel):
    def __init__(self, root):
        super().__init__(root)
        self.title("Tra c·ª©u xe")
        self.geometry("600x400")

        tk.Label(self, text="Nh·∫≠p bi·ªÉn s·ªë:").pack(pady=5)
        self.plate_var = tk.StringVar()
        tk.Entry(self, textvariable=self.plate_var).pack(pady=5)

        tk.Button(self, text="T√¨m", command=self.search).pack(pady=5)
        tk.Button(self, text="‚ùå THO√ÅT", bg="gray", fg="white",
                  command=self.destroy).pack(pady=5)

        self.result_text = tk.Label(self, text="", justify="left")
        self.result_text.pack(pady=10)

    def search(self):
        plate = self.plate_var.get().strip()
        if not plate:
            return
        row = find_vehicle_by_plate(plate)
        if not row:
            self.result_text.config(text="Kh√¥ng t√¨m th·∫•y xe")
            return
        txt = f"Bi·ªÉn s·ªë: {row['license_plate']}\nM√£ v√©: {row['ticket_code']}\nV√†o l√∫c: {row['time_in']}\n"
        if row['time_out']:
            txt += f"Ra l√∫c: {row['time_out']}\nPh√≠: {row['fee']} VND"
        else:
            txt += "Ch∆∞a ra b√£i"
        self.result_text.config(text=txt)

# ================== Main App ==================
class ParkingApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("H·ªá th·ªëng b√£i xe")
        self.geometry("400x300")

        ttk.Button(self, text="üöó Xe v√†o", command=lambda: EntryWindow(self)).pack(pady=10)
        ttk.Button(self, text="üèçÔ∏è Xe ra", command=lambda: ExitWindow(self)).pack(pady=10)
        ttk.Button(self, text="üîç Tra c·ª©u", command=lambda: SearchWindow(self)).pack(pady=10)

        self.count_var = tk.StringVar(value=f"Xe hi·ªán t·∫°i: {get_current_count()}")
        tk.Label(self, textvariable=self.count_var, fg="blue").pack(pady=20)

        self.update_count_loop()

    def update_count_loop(self):
        self.count_var.set(f"Xe hi·ªán t·∫°i: {get_current_count()}")
        self.after(5000, self.update_count_loop)

if __name__ == "__main__":
    app = ParkingApp()
    app.mainloop()
