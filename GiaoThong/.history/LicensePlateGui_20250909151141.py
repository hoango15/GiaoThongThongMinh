import tkinter as tk
from tkinter import ttk, messagebox
import random, string, time, traceback

from database import (
    insert_vehicle, find_vehicle_by_ticket, update_vehicle_exit,
    find_vehicle_by_plate, can_vehicle_enter, update_vehicle_count,
    get_current_count, get_connection
)

# ============= BaseWindow =============
class BaseWindow:
    def __init__(self, master):
        self.master = master

# ============= EntryWindow (Xe v√†o) =============
class EntryWindow(tk.Toplevel, BaseWindow):
    def __init__(self, master):
        tk.Toplevel.__init__(self, master)
        BaseWindow.__init__(self, master)
        self.title("üöó Xe v√†o")
        self.geometry("500x350")
        self.detected_plate = None
        self.detected_vehicle_img = None
        self.detected_plate_img = None

        self.info_text = tk.Label(self, text="Ch∆∞a nh·∫≠n di·ªán bi·ªÉn s·ªë", font=("Arial", 12))
        self.info_text.pack(pady=20)

        ttk.Button(self, text="Nh·∫≠n di·ªán & L∆∞u xe", command=self.confirm_save).pack(pady=10)
        ttk.Button(self, text="Exit", command=self.destroy).pack(pady=5)

    def confirm_save(self):
        # gi·∫£ l·∫≠p bi·ªÉn s·ªë ng·∫´u nhi√™n
        self.detected_plate = "29A-" + str(random.randint(10000, 99999))

        if not can_vehicle_enter():
            messagebox.showwarning("B√£i xe ƒë·∫ßy", "Kh√¥ng th·ªÉ cho xe v√†o n·ªØa!")
            return

        ts = time.time()
        ticket_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
        try:
            insert_vehicle(self.detected_plate, ticket_code, "vehicle.jpg", "plate.jpg")
            update_vehicle_count(+1)   # tƒÉng s·ªë xe
            self.info_text.config(text=f"Xe v√†o!\nBi·ªÉn s·ªë: {self.detected_plate}\nM√£ v√©: {ticket_code}\nTh·ªùi gian: {time.ctime(ts)}")
            messagebox.showinfo("Th√†nh c√¥ng", f"L∆∞u xe v√†o th√†nh c√¥ng!\nM√£ v√©: {ticket_code}")
            self.master.update_capacity_label()
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("L·ªói", f"L∆∞u v√†o DB th·∫•t b·∫°i:\n{e}")

# ============= ExitWindow (Xe ra) =============
class ExitWindow(tk.Toplevel, BaseWindow):
    def __init__(self, master):
        tk.Toplevel.__init__(self, master)
        BaseWindow.__init__(self, master)
        self.title("üöô Xe ra")
        self.geometry("500x350")
        self.detected_plate = None

        self.ticket_var = tk.StringVar()

        tk.Label(self, text="Nh·∫≠p m√£ v√©:", font=("Arial", 12)).pack(pady=5)
        ttk.Entry(self, textvariable=self.ticket_var, font=("Arial", 12)).pack(pady=5)

        ttk.Button(self, text="X√°c nh·∫≠n ra", command=self.confirm_exit).pack(pady=10)
        ttk.Button(self, text="Exit", command=self.destroy).pack(pady=5)

        self.info_text = tk.Label(self, text="", font=("Arial", 12))
        self.info_text.pack(pady=15)

    def confirm_exit(self):
        ticket_code = self.ticket_var.get().strip()
        if not ticket_code:
            messagebox.showerror("L·ªói", "C·∫ßn nh·∫≠p m√£ v√© ƒë·ªÉ x√°c nh·∫≠n xe ra")
            return
        try:
            row = find_vehicle_by_ticket(ticket_code)
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("L·ªói DB", f"L·ªói khi truy v·∫•n v√©: {e}")
            return
        if not row:
            messagebox.showerror("Sai m√£ v√©", f"Kh√¥ng t√¨m th·∫•y v√© {ticket_code}")
            return

        # gi·∫£ l·∫≠p nh·∫≠n di·ªán bi·ªÉn s·ªë
        self.detected_plate = row["license_plate"]

        db_plate = row["license_plate"]
        if db_plate == self.detected_plate:
            try:
                fee = 10000
                update_vehicle_exit(ticket_code, fee)
                update_vehicle_count(-1)   # gi·∫£m s·ªë xe
                self.info_text.config(text=f"Xe ra!\nBi·ªÉn s·ªë: {self.detected_plate}\nM√£ v√©: {ticket_code}\nPh√≠: {fee} VND")
                messagebox.showinfo("Th√†nh c√¥ng", f"Xe ra h·ª£p l·ªá!\nChi ph√≠: {fee} VND")
                self.master.update_capacity_label()
            except Exception as e:
                traceback.print_exc()
                messagebox.showerror("L·ªói", f"C·∫≠p nh·∫≠t DB th·∫•t b·∫°i: {e}")
        else:
            messagebox.showerror("Sai bi·ªÉn s·ªë", "Bi·ªÉn s·ªë kh√¥ng kh·ªõp v·ªõi v√©!")

# ============= SearchWindow (T√¨m xe) =============
class SearchWindow(tk.Toplevel, BaseWindow):
    def __init__(self, master):
        tk.Toplevel.__init__(self, master)
        BaseWindow.__init__(self, master)
        self.title("üîç T√¨m xe")
        self.geometry("500x350")

        self.plate_var = tk.StringVar()
        tk.Label(self, text="Nh·∫≠p bi·ªÉn s·ªë:", font=("Arial", 12)).pack(pady=5)
        ttk.Entry(self, textvariable=self.plate_var, font=("Arial", 12)).pack(pady=5)

        ttk.Button(self, text="T√¨m", command=self.search).pack(pady=10)
        ttk.Button(self, text="Exit", command=self.destroy).pack(pady=5)

        self.info_text = tk.Label(self, text="", font=("Arial", 12))
        self.info_text.pack(pady=15)

    def search(self):
        plate = self.plate_var.get().strip()
        if not plate:
            messagebox.showerror("L·ªói", "C·∫ßn nh·∫≠p bi·ªÉn s·ªë ƒë·ªÉ t√¨m")
            return
        try:
            row = find_vehicle_by_plate(plate)
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("L·ªói DB", f"L·ªói khi truy v·∫•n: {e}")
            return
        if not row:
            self.info_text.config(text=f"Kh√¥ng t√¨m th·∫•y xe {plate}")
        else:
            self.info_text.config(text=f"Xe: {row['license_plate']}\nM√£ v√©: {row['ticket_code']}\nV√†o l√∫c: {row['time_in']}")

# ============= MainApp =============
class MainApp(tk.Tk, BaseWindow):
    def __init__(self):
        tk.Tk.__init__(self)
        BaseWindow.__init__(self, self)
        self.title("üö¶ H·ªá th·ªëng qu·∫£n l√Ω b√£i ƒë·ªó xe")
        self.geometry("600x400")
        self.resizable(False, False)

        style = ttk.Style(self)
        style.configure("TButton", font=("Arial", 12), padding=8)

        self.create_widgets()
        self.update_capacity_label()

    def create_widgets(self):
        tk.Label(self, text="H·ªÜ TH·ªêNG QU·∫¢N L√ù B√ÉI ƒê·ªñ XE", 
                 font=("Arial", 16, "bold"), fg="blue").pack(pady=20)

        btn_frame = ttk.Frame(self)
        btn_frame.pack(pady=15)

        ttk.Button(btn_frame, text="üöó Xe v√†o", width=20, command=self.open_entry_window).grid(row=0, column=0, padx=15, pady=10)
        ttk.Button(btn_frame, text="üöô Xe ra", width=20, command=self.open_exit_window).grid(row=0, column=1, padx=15, pady=10)
        ttk.Button(btn_frame, text="üîç T√¨m xe", width=43, command=self.open_search_window).grid(row=1, column=0, columnspan=2, pady=10)

        # Label hi·ªÉn th·ªã s·ªë l∆∞·ª£ng xe
        self.capacity_var = tk.StringVar(value="ƒêang t·∫£i...")
        tk.Label(self, textvariable=self.capacity_var, font=("Arial", 12), fg="darkgreen").pack(pady=10)

    def update_capacity_label(self):
        try:
            count = get_current_count()
            conn = get_connection()
            cur = conn.cursor()
            cur.execute("SELECT max_capacity FROM config LIMIT 1")
            max_cap, = cur.fetchone()
            cur.close(); conn.close()

            self.capacity_var.set(f"üöò Trong b√£i: {count}/{max_cap}")
        except Exception as e:
            self.capacity_var.set(f"L·ªói t·∫£i s·ªë l∆∞·ª£ng: {e}")

    def open_entry_window(self):
        EntryWindow(self)

    def open_exit_window(self):
        ExitWindow(self)

    def open_search_window(self):
        SearchWindow(self)

if __name__ == "__main__":
    app = MainApp()
    app.mainloop()
