import mysql.connector
from datetime import datetime
import math

# ================== CONNECT DB ==================
def get_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="",        
        database="parking_system"
    )

# ================== CONFIG ==================
def can_vehicle_enter():
    """Ki·ªÉm tra b√£i c√≤n ch·ªó tr·ªëng kh√¥ng"""
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT max_capacity, current_count FROM config LIMIT 1")
    max_cap, cur_count = cur.fetchone()
    cur.close(); conn.close()
    return cur_count < max_cap

def get_current_count():
    """L·∫•y s·ªë l∆∞·ª£ng xe hi·ªán t·∫°i trong b√£i"""
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT current_count FROM config LIMIT 1")
    count, = cur.fetchone()
    cur.close(); conn.close()
    return count

# ================== VEHICLES ==================
def insert_vehicle(plate, ticket_code, vehicle_img_in, plate_img_in):
    """Th√™m xe v√†o DB khi g·ª≠i"""
    conn = get_connection()
    cur = conn.cursor()
    sql = """
        INSERT INTO vehicles 
        (license_plate, ticket_code, time_in, vehicle_img_in_path, plate_img_in_path)
        VALUES (%s, %s, %s, %s, %s)
    """
    cur.execute(sql, (plate, ticket_code, datetime.now(), vehicle_img_in, plate_img_in))

    # tƒÉng s·ªë l∆∞·ª£ng xe trong config
    cur.execute("UPDATE config SET current_count = current_count + 1")
    conn.commit()
    cur.close(); conn.close()

def update_vehicle_exit(ticket_code, vehicle_img_out=None, plate_img_out=None):
   
    conn = get_connection()
    cur = conn.cursor(dictionary=True)

    # L·∫•y th·ªùi gian v√†o
    cur.execute("SELECT time_in FROM vehicles WHERE ticket_code=%s AND time_out IS NULL", (ticket_code,))
    row = cur.fetchone()
    if not row:
        cur.close(); conn.close()
        raise Exception("Kh√¥ng t√¨m th·∫•y xe ho·∫∑c xe ƒë√£ ra")

    time_in = row["time_in"]
    time_out = datetime.now()

    # T√≠nh s·ªë gi·ªù g·ª≠i
    diff_hours = (time_out - time_in).total_seconds() / 3600
    diff_hours_ceil = math.ceil(diff_hours)

    # T√≠nh ph√≠ theo quy t·∫Øc
    if diff_hours_ceil <= 10:
        fee = 10000
    elif diff_hours_ceil <= 24:
        fee = 30000
    else:
        fee = diff_hours_ceil * 5000

    # C·∫≠p nh·∫≠t DB (th√™m ·∫£nh xe ra + ·∫£nh bi·ªÉn s·ªë ra n·∫øu c√≥)
    cur.execute("""
        UPDATE vehicles 
        SET time_out=%s, fee=%s, vehicle_img_out_path=%s, plate_img_out_path=%s
        WHERE ticket_code=%s
    """, (time_out, fee, vehicle_img_out, plate_img_out, ticket_code))

    # gi·∫£m s·ªë l∆∞·ª£ng xe trong config
    cur.execute("UPDATE config SET current_count = current_count - 1")

    conn.commit()
    cur.close(); conn.close()
    return fee

def find_vehicle_by_ticket(ticket_code):
    """T√¨m xe theo m√£ v√©"""
    conn = get_connection()
    cur = conn.cursor(dictionary=True)
    cur.execute("SELECT * FROM vehicles WHERE ticket_code=%s", (ticket_code,))
    row = cur.fetchone()
    cur.close(); conn.close()
    return row

def find_vehicle_by_plate(plate):

    conn = get_connection()
    cur = conn.cursor(dictionary=True)
    cur.execute("""
        SELECT id, license_plate, ticket_code, time_in, time_out, fee, 
               vehicle_img_in_path, vehicle_img_out_path, 
               plate_img_in_path, plate_img_out_path
        FROM vehicles 
        WHERE license_plate=%s 
        ORDER BY time_in DESC 
        LIMIT 1
    """, (plate,))
    row = cur.fetchone()
    cur.close(); conn.close()
    return row

# ================== FORMAT INFO ==================
def pretty_vehicle_info(vehicle):
    """Tr·∫£ v·ªÅ chu·ªói m√¥ t·∫£ th√¥ng tin xe"""
    if not vehicle:
        return "‚ùå Kh√¥ng t√¨m th·∫•y xe"
    
    return f"""
    üöó Bi·ªÉn s·ªë: {vehicle['license_plate']}
    üé´ M√£ v√©: {vehicle['ticket_code']}
    ‚è∞ Gi·ªù v√†o: {vehicle['time_in'].strftime('%d/%m/%Y %H:%M:%S')}
    ‚è∞ Gi·ªù ra: {vehicle['time_out'].strftime('%d/%m/%Y %H:%M:%S') if vehicle['time_out'] else 'Ch∆∞a ra'}
    üí∞ Ph√≠: {vehicle['fee'] if vehicle['fee'] else 'Ch∆∞a t√≠nh'}
    üì∑ ·∫¢nh v√†o: {vehicle['vehicle_img_in_path'] or 'Kh√¥ng c√≥'}
    üì∑ ·∫¢nh ra: {vehicle['vehicle_img_out_path'] or 'Ch∆∞a ch·ª•p'}
    ü™™ Bi·ªÉn s·ªë v√†o: {vehicle['plate_img_in_path'] or 'Kh√¥ng c√≥'}
    ü™™ Bi·ªÉn s·ªë ra: {vehicle['plate_img_out_path'] or 'Ch∆∞a ch·ª•p'}
    """.strip()
