import tkinter as tk
from tkinter import filedialog, messagebox
import cv2
from PIL import Image, ImageTk
import os
import threading
import time
import random, string

from IdentifiedViaCamera import recognize_license_plate_from_camera
from Video_recognition import main as process_video_from_file
from add_missing_data import main as add_missing_data_main
from visualize import main as visualize_main
from database import insert_vehicle, get_vehicle_by_ticket, update_vehicle_exit


class LicensePlateApp:
    def __init__(self, root):
        self.root = root
        self.root.title("H·ªá th·ªëng b√£i ƒë·ªó xe - Nh·∫≠n di·ªán bi·ªÉn s·ªë")
        self.root.geometry("1280x720")
        self.root.resizable(False, False)

        self.mode_var = tk.StringVar(value="in")   # xe v√†o / xe ra
        self.source_var = tk.StringVar(value="camera")  # camera / video
        self.ticket_var = tk.StringVar()
        self.status_var = tk.StringVar(value="S·∫µn s√†ng...")

        self.video_running = False

        # gi·ªØ t·∫°m bi·ªÉn s·ªë m·ªõi nh·∫≠n di·ªán
        self.detected_plate = None
        self.detected_vehicle_img = None
        self.detected_plate_img = None

        self.create_widgets()

    def create_widgets(self):
        # ===== Khung tr√°i: ƒêi·ªÅu khi·ªÉn =====
        control_frame = tk.LabelFrame(self.root, text="ƒêi·ªÅu khi·ªÉn", padx=10, pady=10)
        control_frame.place(x=10, y=10, width=250, height=550)

        # Ch·∫ø ƒë·ªô xe v√†o / xe ra
        tk.Label(control_frame, text="Ch·∫ø ƒë·ªô:").pack(anchor="w")
        tk.Radiobutton(control_frame, text="Xe v√†o", variable=self.mode_var, value="in").pack(anchor="w")
        tk.Radiobutton(control_frame, text="Xe ra", variable=self.mode_var, value="out").pack(anchor="w")

        # Ngu·ªìn nh·∫≠n di·ªán
        source_frame = tk.LabelFrame(control_frame, text="Ngu·ªìn nh·∫≠n di·ªán")
        source_frame.pack(fill="x", pady=10)
        tk.Radiobutton(source_frame, text="Camera realtime", variable=self.source_var, value="camera").pack(anchor="w")
        tk.Radiobutton(source_frame, text="Video file", variable=self.source_var, value="video").pack(anchor="w")

        # M√£ v√© khi xe ra
        tk.Label(control_frame, text="M√£ v√© (xe ra):").pack(anchor="w", pady=(10,0))
        tk.Entry(control_frame, textvariable=self.ticket_var, width=20).pack(anchor="w")

        # N√∫t ƒëi·ªÅu khi·ªÉn
        tk.Button(control_frame, text="‚ñ∂ B·∫ÆT ƒê·∫¶U", bg="green", fg="white", command=self.start).pack(fill="x", pady=(20,5))
        tk.Button(control_frame, text="‚èπ D·ª™NG", bg="red", fg="white", command=self.stop).pack(fill="x")

        # N√∫t x√°c nh·∫≠n
        tk.Button(control_frame, text="üíæ X√ÅC NH·∫¨N L∆ØU", bg="blue", fg="white", command=self.confirm_save).pack(fill="x", pady=(40,5))

        # ===== Khung gi·ªØa: Video =====
        self.video_label = tk.Label(self.root, bg="black")
        self.video_label.place(x=280, y=10, width=640, height=480)

        # ===== Khung ph·∫£i: Th√¥ng tin =====
        info_frame = tk.LabelFrame(self.root, text="Th√¥ng tin s·ª± ki·ªán", padx=10, pady=10)
        info_frame.place(x=940, y=10, width=320, height=480)

        self.info_text = tk.Label(info_frame, text="Ch∆∞a c√≥ s·ª± ki·ªán...", justify="left", anchor="nw")
        self.info_text.pack(fill="x")

        self.vehicle_img_label = tk.Label(info_frame, text="·∫¢nh xe")
        self.vehicle_img_label.pack(pady=5)
        self.plate_img_label = tk.Label(info_frame, text="·∫¢nh bi·ªÉn s·ªë")
        self.plate_img_label.pack(pady=5)

        # ===== Status bar =====
        status_bar = tk.Label(self.root, textvariable=self.status_var, bd=1, relief="sunken", anchor="w")
        status_bar.pack(side="bottom", fill="x")

    # hi·ªÉn th·ªã t·∫°m th·ªùi k·∫øt qu·∫£ nh·∫≠n di·ªán
    def update_detected(self, plate, vpath, ppath):
        self.detected_plate = plate
        self.detected_vehicle_img = vpath
        self.detected_plate_img = ppath
        self.info_text.config(text=f"Nh·∫≠n di·ªán: {plate}\n(ch∆∞a l∆∞u)")
        if vpath and os.path.exists(vpath):
            vimg = Image.open(vpath).resize((200,120))
            self.vehicle_img_label.imgtk = ImageTk.PhotoImage(vimg)
            self.vehicle_img_label.config(image=self.vehicle_img_label.imgtk)
        if ppath and os.path.exists(ppath):
            pimg = Image.open(ppath).resize((200,60))
            self.plate_img_label.imgtk = ImageTk.PhotoImage(pimg)
            self.plate_img_label.config(image=self.plate_img_label.imgtk)

    # x√°c nh·∫≠n l∆∞u
    def confirm_save(self):
        if not self.detected_plate:
            messagebox.showwarning("Ch∆∞a c√≥ d·ªØ li·ªáu", "Ch∆∞a nh·∫≠n di·ªán ƒë∆∞·ª£c bi·ªÉn s·ªë ƒë·ªÉ l∆∞u!")
            return

        ts = time.time()
        mode = self.mode_var.get()
        if mode == "in":
            # t·∫°o ticket
            ticket_code = ''.join(random.choices(string.ascii_uppercase+string.digits, k=6))
            insert_vehicle(ticket_code, self.detected_plate, ts, self.detected_vehicle_img, self.detected_plate_img)
            self.info_text.config(text=f"Xe v√†o!\nBi·ªÉn s·ªë: {self.detected_plate}\nM√£ v√©: {ticket_code}")
            messagebox.showinfo("Th√†nh c√¥ng", f"L∆∞u xe v√†o th√†nh c√¥ng!\nM√£ v√©: {ticket_code}")
        elif mode == "out":
            ticket_code = self.ticket_var.get().strip()
            if not ticket_code:
                messagebox.showerror("L·ªói", "C·∫ßn nh·∫≠p m√£ v√© ƒë·ªÉ x√°c nh·∫≠n xe ra")
                return
            row = get_vehicle_by_ticket(ticket_code)
            if not row:
                messagebox.showerror("Sai m√£ v√©", f"Kh√¥ng t√¨m th·∫•y v√© {ticket_code}")
                return
            # so s√°nh bi·ªÉn s·ªë
            if row[1] == self.detected_plate:  # plate match
                cost = update_vehicle_exit(ticket_code, ts)
                self.info_text.config(text=f"Xe ra!\nBi·ªÉn s·ªë: {self.detected_plate}\nM√£ v√©: {ticket_code}\nPh√≠: {cost} VND")
                messagebox.showinfo("Th√†nh c√¥ng", f"Xe ra h·ª£p l·ªá!\nChi ph√≠: {cost} VND")
            else:
                messagebox.showerror("Sai bi·ªÉn s·ªë", "Bi·ªÉn s·ªë kh√¥ng kh·ªõp v·ªõi v√©!")

    # ====== x·ª≠ l√Ω ======
    def start(self):
        mode, src = self.mode_var.get(), self.source_var.get()
        if src == "camera":
            threading.Thread(target=self.process_camera, daemon=True).start()
        elif src == "video":
            self.process_video()

    def stop(self):
        self.video_running = False
        self.video_label.config(image="", text="")
        self.status_var.set("ƒê√£ d·ª´ng.")

    def process_camera(self):
        self.status_var.set(f"ƒêang nh·∫≠n di·ªán t·ª´ camera ({self.mode_var.get()})...")
        recognize_license_plate_from_camera(self, mode=self.mode_var.get())
        self.status_var.set("Xong camera.")

    def process_video(self):
        video_file = filedialog.askopenfilename(title="Ch·ªçn video", filetypes=[("Video files", "*.mp4 *.avi")])
        if not video_file: return
        self.status_var.set(f"ƒêang x·ª≠ l√Ω video ({self.mode_var.get()})...")
        threading.Thread(target=self.run_video, args=(video_file,), daemon=True).start()

    def run_video(self, video_file):
        process_video_from_file(video_file)
        add_missing_data_main("output_video/results.csv", "output_video/results_interpolated.csv")
        visualize_main(video_file, "output_video/output_video.mp4", "output_video/results_interpolated.csv")
        self.display_output_video("output_video/output_video.mp4")
        self.status_var.set("X·ª≠ l√Ω video xong.")

    def display_output_video(self, video_file):
        cap = cv2.VideoCapture(video_file)
        self.video_running = True
        def update():
            if not self.video_running: cap.release(); return
            ret, frame = cap.read()
            if not ret: cap.release(); return
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(frame_rgb).resize((640,480))
            self.displayed_image = ImageTk.PhotoImage(img)
            self.video_label.config(image=self.displayed_image)
            self.video_label.image = self.displayed_image
            self.root.after(30, update)
        update()


if __name__ == "__main__":
    root = tk.Tk()
    app = LicensePlateApp(root)
    root.mainloop()
