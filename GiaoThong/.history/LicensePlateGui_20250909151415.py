import tkinter as tk
from tkinter import filedialog, messagebox
import cv2
from PIL import Image, ImageTk
import os
import threading
import time
import random, string
import traceback

# c√°c module ph·ª•
from IdentifiedViaCamera import recognize_license_plate_from_camera
from Video_recognition import main as process_video_from_file
from add_missing_data import main as add_missing_data_main
from visualize import main as visualize_main
from database import (
    insert_vehicle, find_vehicle_by_ticket, update_vehicle_exit,
    can_vehicle_enter, update_vehicle_count, get_current_count
)

# c·ªë g·∫Øng import h√†m t√¨m theo bi·ªÉn s·ªë
try:
    from database import find_vehicle_by_plate
except Exception:
    find_vehicle_by_plate = None


class BaseWindow:
    def __init__(self, root):
        self.root = root
        self.stop_event = threading.Event()
        self.video_running = False
        self.displayed_image = None
        self.detected_plate = None
        self.detected_vehicle_img = None
        self.detected_plate_img = None

    def reset_stop(self):
        self.stop_event.clear()

    def request_stop(self):
        self.stop_event.set()

    def show_capacity_info(self, parent):
        """Th√™m label hi·ªÉn th·ªã s·ªë xe hi·ªán t·∫°i v√† s·ª©c ch·ª©a c√≤n l·∫°i"""
        frame = tk.Frame(parent)
        frame.pack(pady=4)
        count = get_current_count()
        text = f"üöó Hi·ªán c√≥ {count} xe trong b√£i."
        self.capacity_label = tk.Label(frame, text=text, fg="blue")
        self.capacity_label.pack()

    def refresh_capacity(self):
        try:
            count = get_current_count()
            self.capacity_label.config(text=f"üöó Hi·ªán c√≥ {count} xe trong b√£i.")
        except Exception:
            pass


class MainApp(tk.Tk, BaseWindow):
    def __init__(self):
        tk.Tk.__init__(self)
        BaseWindow.__init__(self, self)
        self.title("H·ªá th·ªëng b√£i ƒë·ªó xe - Qu·∫£n l√Ω")
        self.geometry("720x400")
        self.resizable(False, False)
        self.create_widgets()

    def create_widgets(self):
        tk.Label(self, text="H·ªÜ TH·ªêNG QU·∫¢N L√ù B√ÉI ƒê·ªñ - CH·ªåN CH·ª®C NƒÇNG", font=("Arial", 14)).pack(pady=12)
        btn_frame = tk.Frame(self)
        btn_frame.pack(pady=10)
        tk.Button(btn_frame, text="üöó X·ª≠ l√Ω - Xe v√†o", width=20, command=self.open_entry_window).grid(row=0, column=0, padx=8, pady=6)
        tk.Button(btn_frame, text="üöô X·ª≠ l√Ω - Xe ra", width=20, command=self.open_exit_window).grid(row=0, column=1, padx=8, pady=6)
        tk.Button(btn_frame, text="üîç T√¨m xe theo bi·ªÉn s·ªë", width=20, command=self.open_search_window).grid(row=1, column=0, padx=8, pady=6)
        tk.Button(btn_frame, text="üéû X·ª≠ l√Ω Video (batch)", width=20, command=self.open_video_process_dialog).grid(row=1, column=1, padx=8, pady=6)
        tk.Label(self, text="Ghi ch√∫: Nh·ªõ ƒë·ªÉ c√°c module x·ª≠ l√Ω ·∫£nh / DB c√πng folder.", fg="gray").pack(pady=8)
        self.show_capacity_info(self)

    def open_entry_window(self):
        EntryWindow(self)

    def open_exit_window(self):
        ExitWindow(self)

    def open_search_window(self):
        SearchWindow(self)

    def open_video_process_dialog(self):
        VideoProcessWindow(self)


class EntryWindow(tk.Toplevel, BaseWindow):
    def __init__(self, master):
        tk.Toplevel.__init__(self, master)
        BaseWindow.__init__(self, master)
        self.title("Xe v√†o - Nh·∫≠n di·ªán bi·ªÉn s·ªë")
        self.geometry("1000x680")
        self.resizable(False, False)

        self.status_var = tk.StringVar(value="S·∫µn s√†ng...")
        self.create_widgets()
        self.camera_thread = None

    def create_widgets(self):
        left = tk.LabelFrame(self, text="ƒêi·ªÅu khi·ªÉn", padx=10, pady=10)
        left.place(x=10, y=10, width=300, height=340)

        tk.Label(left, text="Ngu·ªìn:").pack(anchor="w")
        self.source_var = tk.StringVar(value="camera")
        tk.Radiobutton(left, text="Camera realtime", variable=self.source_var, value="camera").pack(anchor="w")
        tk.Radiobutton(left, text="File video", variable=self.source_var, value="video").pack(anchor="w")

        tk.Button(left, text="‚ñ∂ B·∫ÆT ƒê·∫¶U", bg="green", fg="white", command=self.start).pack(fill="x", pady=(10,5))
        tk.Button(left, text="‚èπ D·ª™NG", bg="red", fg="white", command=self.stop).pack(fill="x")
        tk.Button(left, text="üíæ X√ÅC NH·∫¨N L∆ØU (Xe v√†o)", bg="blue", fg="white", command=self.confirm_save).pack(fill="x", pady=(20,5))
        tk.Button(left, text="‚ùå Exit", bg="gray", command=self.destroy).pack(fill="x", pady=(20,5))

        self.show_capacity_info(left)

        # Right: video + info
        self.video_label = tk.Label(self, bg="black")
        self.video_label.place(x=320, y=10, width=640, height=480)

        info_frame = tk.LabelFrame(self, text="Th√¥ng tin", padx=10, pady=10)
        info_frame.place(x=10, y=360, width=960, height=300)
        self.info_text = tk.Label(info_frame, text="Ch∆∞a c√≥ d·ªØ li·ªáu nh·∫≠n di·ªán...", anchor="nw", justify="left")
        self.info_text.pack(fill="x")

    def confirm_save(self):
        if not self.detected_plate:
            messagebox.showwarning("Ch∆∞a c√≥ d·ªØ li·ªáu", "Ch∆∞a nh·∫≠n di·ªán ƒë∆∞·ª£c bi·ªÉn s·ªë ƒë·ªÉ l∆∞u!")
            return
        if not can_vehicle_enter():
            messagebox.showerror("B√£i ƒë·∫ßy", "Kh√¥ng th·ªÉ cho xe v√†o, b√£i ƒë√£ ƒë·∫ßy!")
            return
        ts = time.time()
        ticket_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
        try:
            insert_vehicle(self.detected_plate, ticket_code, self.detected_vehicle_img, self.detected_plate_img)
            update_vehicle_count(+1)  # tƒÉng s·ªë xe trong b√£i
            self.refresh_capacity()
            self.info_text.config(text=f"Xe v√†o!\nBi·ªÉn s·ªë: {self.detected_plate}\nM√£ v√©: {ticket_code}\nTh·ªùi gian: {time.ctime(ts)}")
            messagebox.showinfo("Th√†nh c√¥ng", f"L∆∞u xe v√†o th√†nh c√¥ng!\nM√£ v√©: {ticket_code}")
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("L·ªói", f"L∆∞u v√†o DB th·∫•t b·∫°i:\n{e}")


class ExitWindow(tk.Toplevel, BaseWindow):
    def __init__(self, master):
        tk.Toplevel.__init__(self, master)
        BaseWindow.__init__(self, master)
        self.title("Xe ra - X√°c nh·∫≠n v√† t√≠nh ph√≠")
        self.geometry("1000x680")
        self.resizable(False, False)

        self.status_var = tk.StringVar(value="S·∫µn s√†ng...")
        self.ticket_var = tk.StringVar()
        self.source_var = tk.StringVar(value="camera")

        self.create_widgets()
        self.camera_thread = None

    def create_widgets(self):
        left = tk.LabelFrame(self, text="ƒêi·ªÅu khi·ªÉn", padx=10, pady=10)
        left.place(x=10, y=10, width=300, height=340)

        tk.Label(left, text="Nh·∫≠p m√£ v√© (xe ra):").pack(anchor="w")
        tk.Entry(left, textvariable=self.ticket_var, width=25).pack(anchor="w", pady=(0,10))
        tk.Button(left, text="X√°c nh·∫≠n (so s√°nh & ra)", bg="blue", fg="white", command=self.confirm_exit).pack(fill="x", pady=(10,5))
        tk.Button(left, text="‚ùå Exit", bg="gray", command=self.destroy).pack(fill="x", pady=(20,5))

        self.show_capacity_info(left)

        # Right
        self.video_label = tk.Label(self, bg="black")
        self.video_label.place(x=320, y=10, width=640, height=480)
        self.info_text = tk.Label(self, text="Ch∆∞a c√≥ d·ªØ li·ªáu...", anchor="nw", justify="left")
        self.info_text.place(x=10, y=360, width=960, height=300)

    def confirm_exit(self):
        ticket_code = self.ticket_var.get().strip()
        if not ticket_code:
            messagebox.showerror("L·ªói", "C·∫ßn nh·∫≠p m√£ v√© ƒë·ªÉ x√°c nh·∫≠n xe ra")
            return
        try:
            row = find_vehicle_by_ticket(ticket_code)
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("L·ªói DB", f"L·ªói khi truy v·∫•n v√©: {e}")
            return
        if not row:
            messagebox.showerror("Sai m√£ v√©", f"Kh√¥ng t√¨m th·∫•y v√© {ticket_code}")
            return
        db_plate = row[1]  # license_plate
        if db_plate == self.detected_plate:
            try:
                cost = update_vehicle_exit(ticket_code, time.time())
                update_vehicle_count(-1)  # gi·∫£m s·ªë xe
                self.refresh_capacity()
                self.info_text.config(text=f"Xe ra!\nBi·ªÉn s·ªë: {self.detected_plate}\nM√£ v√©: {ticket_code}\nPh√≠: {cost} VND")
                messagebox.showinfo("Th√†nh c√¥ng", f"Xe ra h·ª£p l·ªá!\nChi ph√≠: {cost} VND")
            except Exception as e:
                traceback.print_exc()
                messagebox.showerror("L·ªói", f"C·∫≠p nh·∫≠t DB th·∫•t b·∫°i: {e}")
        else:
            messagebox.showerror("Sai bi·ªÉn s·ªë", "Bi·ªÉn s·ªë kh√¥ng kh·ªõp v·ªõi v√©!")


class SearchWindow(tk.Toplevel, BaseWindow):
    def __init__(self, master):
        super().__init__(master)
        BaseWindow.__init__(self, master)
        self.title("T√¨m xe theo bi·ªÉn s·ªë")
        self.geometry("700x420")
        self.resizable(False, False)
        self.create_widgets()

    def create_widgets(self):
        frame = tk.Frame(self, padx=10, pady=10)
        frame.pack(fill="both", expand=True)
        tk.Label(frame, text="Nh·∫≠p bi·ªÉn s·ªë:").grid(row=0, column=0, sticky="w")
        self.plate_var = tk.StringVar()
        tk.Entry(frame, textvariable=self.plate_var, width=30).grid(row=0, column=1, sticky="w")
        tk.Button(frame, text="üîç T√¨m", command=self.search).grid(row=0, column=2, padx=8)
        tk.Button(frame, text="‚ùå Exit", command=self.destroy).grid(row=0, column=3, padx=8)
        self.info_text = tk.Label(frame, text="K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...", anchor="nw", justify="left")
        self.info_text.grid(row=1, column=0, columnspan=4, sticky="w", pady=(10,0))


class VideoProcessWindow(tk.Toplevel, BaseWindow):
    def __init__(self, master):
        super().__init__(master)
        BaseWindow.__init__(self, master)
        self.title("X·ª≠ l√Ω Video")
        self.geometry("500x200")
        self.resizable(False, False)
        self.create_widgets()

    def create_widgets(self):
        frame = tk.Frame(self, padx=10, pady=10)
        frame.pack(fill="both", expand=True)
        tk.Button(frame, text="Ch·ªçn video & X·ª≠ l√Ω", command=self.choose_and_process).pack(pady=10)
        tk.Button(frame, text="‚ùå Exit", command=self.destroy).pack(pady=10)
        self.status_label = tk.Label(frame, text="Tr·∫°ng th√°i: ch·ªù...")
        self.status_label.pack(pady=6)
