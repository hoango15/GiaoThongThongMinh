import tkinter as tk
from tkinter import filedialog, messagebox
from turtle import left
import cv2
from PIL import Image, ImageTk
import os
import threading
import time
import random, string
import traceback

from matplotlib import style

# c√°c module ph·ª• (gi·ªØ nguy√™n nh∆∞ project c·ªßa b·∫°n)
from IdentifiedViaCamera import recognize_license_plate_from_camera
from Video_recognition import main as process_video_from_file
from add_missing_data import main as add_missing_data_main
from visualize import main as visualize_main
from database import insert_vehicle, find_vehicle_by_ticket, update_vehicle_exit

# c·ªë g·∫Øng import h√†m t√¨m theo bi·ªÉn s·ªë; n·∫øu database.py ch∆∞a c√≥ th√¨ s·∫Ω b√°o khi d√πng
try:
    from database import find_vehicle_by_plate
except Exception:
    find_vehicle_by_plate = None


class BaseWindow:
    """Common helpers for windows"""
    def __init__(self, root):
        self.root = root
        self.stop_event = threading.Event()
        self.video_running = False
        self.displayed_image = None  # to keep reference
        # temp detected items (shared between windows if desired)
        self.detected_plate = None
        self.detected_vehicle_img = None
        self.detected_plate_img = None

    def reset_stop(self):
        self.stop_event.clear()

    def request_stop(self):
        self.stop_event.set()


# ====== MAIN MENU ======
class MainApp(tk.Tk, BaseWindow):
    def __init__(self):
        tk.Tk.__init__(self)
        BaseWindow.__init__(self, self)

        self.title("üö¶ H·ªá th·ªëng b√£i ƒë·ªó xe - Qu·∫£n l√Ω")
        self.geometry("750x450")
        self.configure(bg="#f2f6fa")  # n·ªÅn s√°ng nh·∫π
        self.resizable(False, False)

        self.create_widgets()

    def create_widgets(self):
        tk.Label(
            self,
            text="H·ªÜ TH·ªêNG QU·∫¢N L√ù B√ÉI ƒê·ªñ",
            font=("Arial", 18, "bold"),
            bg="#f2f6fa",
            fg="#222"
        ).pack(pady=20)

        btn_frame = tk.Frame(self, bg="#f2f6fa")
        btn_frame.pack(pady=20)

        style = {"width": 22, "height": 2, "font": ("Arial", 12), "relief": "raised"}

        tk.Button(
            btn_frame,
            text="üöó Xe v√†o",
            bg="#4CAF50",
            fg="white",
            command=self.open_entry_window,
            **style
        ).grid(row=0, column=0, padx=12, pady=10)

        tk.Button(
            btn_frame,
            text="üöô Xe ra",
            bg="#E53935",
            fg="white",
            command=self.open_exit_window,
            **style
        ).grid(row=0, column=1, padx=12, pady=10)

        tk.Button(
            btn_frame,
            text="üîç T√¨m xe",
            bg="#2196F3",
            fg="white",
            command=self.open_search_window,
            **style
        ).grid(row=1, column=0, padx=12, pady=10)

        # üëâ N√∫t Tho√°t thay cho "X·ª≠ l√Ω Video"
        tk.Button(
            btn_frame,
            text="‚ùå Tho√°t",
            bg="#9E9E9E",
            fg="white",
            command=self.quit,
            **style
        ).grid(row=1, column=1, padx=12, pady=10)


    def open_entry_window(self):
        EntryWindow(self)

    def open_exit_window(self):
        ExitWindow(self)

    def open_search_window(self):
        SearchWindow(self)

class EntryWindow(tk.Toplevel, BaseWindow):
    def __init__(self, master):
        tk.Toplevel.__init__(self, master)
        BaseWindow.__init__(self, master)
        self.title("Xe v√†o - Nh·∫≠n di·ªán bi·ªÉn s·ªë")
        self.geometry("1000x750")
        self.resizable(False, False)

        self.status_var = tk.StringVar(value="S·∫µn s√†ng...")
        self.create_widgets()
        self.camera_thread = None

    def create_widgets(self):
        left = tk.LabelFrame(self, text="ƒêi·ªÅu khi·ªÉn", padx=10, pady=10)
        left.place(x=10, y=10, width=300, height=300)

        tk.Label(left, text="Ngu·ªìn:").pack(anchor="w")
        self.source_var = tk.StringVar(value="camera")
        tk.Radiobutton(left, text="Camera realtime", variable=self.source_var, value="camera").pack(anchor="w")
        tk.Radiobutton(left, text="File video", variable=self.source_var, value="video").pack(anchor="w")

        tk.Button(left, text="‚ñ∂ B·∫ÆT ƒê·∫¶U", bg="green", fg="white", command=self.start).pack(fill="x", pady=(10,5))
        tk.Button(left, text="‚ùå Tho√°t", bg="red", fg="white", command=self.exit_window).pack(fill="x")

        tk.Label(left, text="Lo·∫°i xe:").pack(anchor="w", pady=(10,2))
        self.vehicle_type_var = tk.StringVar(value="Xe m√°y")
        self.vehicle_type_combo = tk.Combobox(left, textvariable=self.vehicle_type_var, state="readonly")
        self.vehicle_type_combo["values"] = ["Xe m√°y", "√î t√¥", "Xe t·∫£i tr·ªçng l·ªõn"]
        self.vehicle_type_combo.pack(fill="x")

        tk.Button(left, text="üíæ X√ÅC NH·∫¨N L∆ØU (Xe v√†o)", bg="blue", fg="white", command=self.confirm_save).pack(fill="x", pady=(20,5))
        tk.Label(left, text="(L∆∞u khi ƒë√£ nh·∫≠n di·ªán ƒë∆∞·ª£c bi·ªÉn s·ªë)", font=("Arial", 9), fg="gray").pack()
        # Right: video + info
        self.video_label = tk.Label(self, bg="black")
        self.video_label.place(x=320, y=10, width=640, height=480)

        info_frame = tk.LabelFrame(self, text="Th√¥ng tin", padx=10, pady=10)
        info_frame.place(x=10, y=320, width=960, height=300)

        self.info_text = tk.Label(info_frame, text="Ch∆∞a c√≥ d·ªØ li·ªáu nh·∫≠n di·ªán...", anchor="nw", justify="left")
        self.info_text.pack(fill="x")

        # frame for small images
        imgs = tk.Frame(info_frame)
        imgs.pack(pady=6)
        self.vehicle_img_label = tk.Label(imgs, text="·∫¢nh xe")
        self.vehicle_img_label.grid(row=0, column=0, padx=8)
        self.plate_img_label = tk.Label(imgs, text="·∫¢nh bi·ªÉn s·ªë")
        self.plate_img_label.grid(row=0, column=1, padx=8)

        status_bar = tk.Label(self, textvariable=self.status_var, bd=1, relief="sunken", anchor="w")
        status_bar.place(x=0, y=620, relwidth=1)

    def exit_window(self):
        """Tho√°t v·ªÅ menu ch√≠nh"""
        self.stop()   # d·ª´ng camera/video n·∫øu ƒëang ch·∫°y
        self.destroy()

    def start(self):
        src = self.source_var.get()
        self.reset_stop()
        self.status_var.set("ƒêang ch·∫°y...")
        if src == "camera":
            # start camera thread
            self.camera_thread = threading.Thread(target=self.process_camera, daemon=True)
            self.camera_thread.start()
        else:
            # choose video file and run processing -> then display preview
            video_file = filedialog.askopenfilename(title="Ch·ªçn video", filetypes=[("Video files", "*.mp4 *.avi *.mov")])
            if not video_file:
                self.status_var.set("H·ªßy ch·ªçn video.")
                return
            self.video_thread = threading.Thread(target=self.process_video_file, args=(video_file,), daemon=True)
            self.video_thread.start()

    def stop(self):
        # y√™u c·∫ßu d·ª´ng c√°c thread
        self.request_stop()
        self.video_running = False
        self.status_var.set("ƒê√£ d·ª´ng.")
        # clear video display
        self.video_label.config(image="", text="")

    def process_camera(self):
     
        self.video_running = True
        try:
            
            recognize_license_plate_from_camera(self, mode="in", stop_event=self.stop_event)
        except TypeError:
            # fallback: g·ªçi kh√¥ng truy·ªÅn stop_event ‚Äî hy v·ªçng b√™n trong h√†m ƒë√≥ ki·ªÉm tra self.video_running
            try:
                recognize_license_plate_from_camera(self, mode="in")
            except Exception as e:
                traceback.print_exc()
                messagebox.showerror("L·ªói", f"L·ªói khi g·ªçi recognize_license_plate_from_camera:\n{e}")
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("L·ªói", f"L·ªói khi x·ª≠ l√Ω camera:\n{e}")

        self.video_running = False
        if not self.stop_event.is_set():
            self.status_var.set("Ho√†n t·∫•t nh·∫≠n di·ªán camera.")
        else:
            self.status_var.set("Nh·∫≠n di·ªán camera ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")

    def process_video_file(self, video_file):
        # g·ªçi pipeline x·ª≠ l√Ω video (n·∫∑ng)
        try:
            process_video_from_file(video_file)
            add_missing_data_main("output_video/results.csv", "output_video/results_interpolated.csv")
            visualize_main(video_file, "output_video/output_video.mp4", "output_video/results_interpolated.csv")
            # hi·ªÉn th·ªã k·∫øt qu·∫£
            self.display_output_video("output_video/output_video.mp4")
            self.status_var.set("X·ª≠ l√Ω video xong.")
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("L·ªói", f"L·ªói x·ª≠ l√Ω video:\n{e}")
            self.status_var.set("L·ªói x·ª≠ l√Ω video.")

    def confirm_save(self):
        if not self.detected_plate:
            messagebox.showwarning("Ch∆∞a c√≥ d·ªØ li·ªáu", "Ch∆∞a nh·∫≠n di·ªán ƒë∆∞·ª£c bi·ªÉn s·ªë ƒë·ªÉ l∆∞u!")
            return
        ts = time.time()
        ticket_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
        try:
            insert_vehicle(self.detected_plate, ticket_code, self.detected_vehicle_img, self.detected_plate_img)
            self.info_text.config(text=f"Xe v√†o!\nBi·ªÉn s·ªë: {self.detected_plate}\nM√£ v√©: {ticket_code}\nTh·ªùi gian: {time.ctime(ts)}")
            messagebox.showinfo("Th√†nh c√¥ng", f"L∆∞u xe v√†o th√†nh c√¥ng!\nM√£ v√©: {ticket_code}")
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("L·ªói", f"L∆∞u v√†o DB th·∫•t b·∫°i:\n{e}")

    # H√†m helper ƒë·ªÉ GUI b√™n trong ho·∫∑c module nh·∫≠n di·ªán g·ªçi khi c√≥ k·∫øt qu·∫£
    def update_detected(self, plate, vpath, ppath):
        """C·∫≠p nh·∫≠t ·∫£nh/bi·ªÉn s·ªë khi c√≥ k·∫øt qu·∫£ nh·∫≠n di·ªán - c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi b·ªüi module camera"""
        self.detected_plate = plate
        self.detected_vehicle_img = vpath
        self.detected_plate_img = ppath
        # c·∫≠p nh·∫≠t text/·∫£nh tr√™n GUI
        self.info_text.config(text=f"Nh·∫≠n di·ªán: {plate}\n(ch∆∞a l∆∞u)")
        if vpath and os.path.exists(vpath):
            try:
                vimg = Image.open(vpath).resize((200, 120))
                self.vehicle_img_label.imgtk = ImageTk.PhotoImage(vimg)
                self.vehicle_img_label.config(image=self.vehicle_img_label.imgtk)
            except Exception:
                pass
        if ppath and os.path.exists(ppath):
            try:
                pimg = Image.open(ppath).resize((200, 60))
                self.plate_img_label.imgtk = ImageTk.PhotoImage(pimg)
                self.plate_img_label.config(image=self.plate_img_label.imgtk)
            except Exception:
                pass

    def display_output_video(self, video_file):
        # play rendered output video in label
        if not os.path.exists(video_file):
            messagebox.showwarning("Kh√¥ng t√¨m th·∫•y", f"Kh√¥ng t√¨m th·∫•y file: {video_file}")
            return
        cap = cv2.VideoCapture(video_file)
        self.video_running = True

        def update():
            if not self.video_running or self.stop_event.is_set():
                cap.release()
                return
            ret, frame = cap.read()
            if not ret:
                cap.release()
                self.video_running = False
                return
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(frame_rgb).resize((640, 480))
            self.displayed_image = ImageTk.PhotoImage(img)
            self.video_label.config(image=self.displayed_image)
            self.video_label.image = self.displayed_image
            self.after(30, update)

        update()


class ExitWindow(tk.Toplevel, BaseWindow):
    def __init__(self, master):
        tk.Toplevel.__init__(self, master)
        BaseWindow.__init__(self, master)
        self.title("Xe ra - X√°c nh·∫≠n v√† t√≠nh ph√≠")
        self.geometry("1500x750")
        self.resizable(False, False)

        self.status_var = tk.StringVar(value="S·∫µn s√†ng...")
        self.ticket_var = tk.StringVar()
        self.source_var = tk.StringVar(value="camera")

        self.create_widgets()
        self.camera_thread = None

    def create_widgets(self):
        left = tk.LabelFrame(self, text="ƒêi·ªÅu khi·ªÉn", padx=10, pady=10)
        left.place(x=10, y=10, width=300, height=300)

        tk.Label(left, text="Nh·∫≠p m√£ v√© (xe ra):").pack(anchor="w")
        tk.Entry(left, textvariable=self.ticket_var, width=25).pack(anchor="w", pady=(0,10))
      


        tk.Label(left, text="Ngu·ªìn:").pack(anchor="w")
        tk.Radiobutton(left, text="Camera realtime", variable=self.source_var, value="camera").pack(anchor="w")
        tk.Radiobutton(left, text="Video file", variable=self.source_var, value="video").pack(anchor="w")

        tk.Button(left, text="‚ñ∂ B·∫ÆT ƒê·∫¶U", bg="green", fg="white", command=self.start).pack(fill="x", pady=(10,5))
        tk.Button(left, text="‚ùå Tho√°t", bg="red", fg="white", command=self.exit_window).pack(fill="x")
        tk.Button(left, text="X√°c nh·∫≠n (so s√°nh & ra)", bg="blue", fg="white", command=self.confirm_exit).pack(fill="x", pady=(20,5))

        # Right: video + info
        self.video_label = tk.Label(self, bg="black")
        self.video_label.place(x=320, y=10, width=640, height=480)

        info_frame = tk.LabelFrame(self, text="Th√¥ng tin", padx=10, pady=10)
        info_frame.place(x=10, y=320, width=960, height=300)

        self.info_text = tk.Label(info_frame, text="Ch∆∞a c√≥ d·ªØ li·ªáu nh·∫≠n di·ªán...", anchor="nw", justify="left")
        self.info_text.pack(fill="x")

        imgs = tk.Frame(info_frame)
        imgs.pack(pady=6)
        self.vehicle_img_label = tk.Label(imgs, text="·∫¢nh xe")
        self.vehicle_img_label.grid(row=0, column=0, padx=8)
        self.plate_img_label = tk.Label(imgs, text="·∫¢nh bi·ªÉn s·ªë")
        self.plate_img_label.grid(row=0, column=1, padx=8)

        status_bar = tk.Label(self, textvariable=self.status_var, bd=1, relief="sunken", anchor="w")
        status_bar.place(x=0, y=620, relwidth=1)

    def start(self):
        src = self.source_var.get()
        self.reset_stop()
        self.status_var.set("ƒêang ch·∫°y...")
        if src == "camera":
            self.camera_thread = threading.Thread(target=self.process_camera, daemon=True)
            self.camera_thread.start()
        else:
            video_file = filedialog.askopenfilename(title="Ch·ªçn video", filetypes=[("Video files", "*.mp4 *.avi *.mov")])
            if not video_file:
                self.status_var.set("H·ªßy ch·ªçn video.")
                return
            self.video_thread = threading.Thread(target=self.process_video_file, args=(video_file,), daemon=True)
            self.video_thread.start()

    def stop(self):
        self.request_stop()
        self.video_running = False
        self.status_var.set("ƒê√£ d·ª´ng.")
        self.video_label.config(image="", text="")

    def process_camera(self):
        self.video_running = True
        try:
            # t∆∞∆°ng t·ª± EntryWindow: c·ªë g·∫Øng truy·ªÅn stop_event
            recognize_license_plate_from_camera(self, mode="out", stop_event=self.stop_event)
        except TypeError:
            try:
                recognize_license_plate_from_camera(self, mode="out")
            except Exception as e:
                traceback.print_exc()
                messagebox.showerror("L·ªói", f"L·ªói khi g·ªçi recognize_license_plate_from_camera:\n{e}")
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("L·ªói", f"L·ªói khi x·ª≠ l√Ω camera:\n{e}")

        self.video_running = False
        if not self.stop_event.is_set():
            self.status_var.set("Ho√†n t·∫•t nh·∫≠n di·ªán camera.")
        else:
            self.status_var.set("Nh·∫≠n di·ªán camera ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")

    def process_video_file(self, video_file):
        try:
            process_video_from_file(video_file)
            add_missing_data_main("output_video/results.csv", "output_video/results_interpolated.csv")
            visualize_main(video_file, "output_video/output_video.mp4", "output_video/results_interpolated.csv")
            self.display_output_video("output_video/output_video.mp4")
            self.status_var.set("X·ª≠ l√Ω video xong.")
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("L·ªói", f"L·ªói x·ª≠ l√Ω video:\n{e}")
            self.status_var.set("L·ªói x·ª≠ l√Ω video.")

    def confirm_exit(self):
        ticket_code = self.ticket_var.get().strip()
        if not ticket_code:
            messagebox.showerror("L·ªói", "C·∫ßn nh·∫≠p m√£ v√© ƒë·ªÉ x√°c nh·∫≠n xe ra")
            return
        try:
            row = find_vehicle_by_ticket(ticket_code)
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("L·ªói DB", f"L·ªói khi truy v·∫•n v√©: {e}")
            return
        if not row:
            messagebox.showerror("Sai m√£ v√©", f"Kh√¥ng t√¨m th·∫•y v√© {ticket_code}")
            return
        db_plate = row[1]  # license_plate
        if db_plate == self.detected_plate:
            try:
                cost = update_vehicle_exit(ticket_code, time.time())
                self.info_text.config(text=f"Xe ra!\nBi·ªÉn s·ªë: {self.detected_plate}\nM√£ v√©: {ticket_code}\nPh√≠: {cost} VND")
                messagebox.showinfo("Th√†nh c√¥ng", f"Xe ra h·ª£p l·ªá!\nChi ph√≠: {cost} VND")
            except Exception as e:
                traceback.print_exc()
                messagebox.showerror("L·ªói", f"C·∫≠p nh·∫≠t DB th·∫•t b·∫°i: {e}")
        else:
            messagebox.showerror("Sai bi·ªÉn s·ªë", "Bi·ªÉn s·ªë kh√¥ng kh·ªõp v·ªõi v√©!")

    def update_detected(self, plate, vpath, ppath):
        self.detected_plate = plate
        self.detected_vehicle_img = vpath
        self.detected_plate_img = ppath
        self.info_text.config(text=f"Nh·∫≠n di·ªán: {plate}\n(ch∆∞a x√°c nh·∫≠n)")
        if vpath and os.path.exists(vpath):
            try:
                vimg = Image.open(vpath).resize((200, 120))
                self.vehicle_img_label.imgtk = ImageTk.PhotoImage(vimg)
                self.vehicle_img_label.config(image=self.vehicle_img_label.imgtk)
            except Exception:
                pass
        if ppath and os.path.exists(ppath):
            try:
                pimg = Image.open(ppath).resize((200, 60))
                self.plate_img_label.imgtk = ImageTk.PhotoImage(pimg)
                self.plate_img_label.config(image=self.plate_img_label.imgtk)
            except Exception:
                pass

    def display_output_video(self, video_file):
        if not os.path.exists(video_file):
            messagebox.showwarning("Kh√¥ng t√¨m th·∫•y", f"Kh√¥ng t√¨m th·∫•y file: {video_file}")
            return
        cap = cv2.VideoCapture(video_file)
        self.video_running = True

        def update():
            if not self.video_running or self.stop_event.is_set():
                cap.release()
                return
            ret, frame = cap.read()
            if not ret:
                cap.release()
                self.video_running = False
                return
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(frame_rgb).resize((640, 480))
            self.displayed_image = ImageTk.PhotoImage(img)
            self.video_label.config(image=self.displayed_image)
            self.video_label.image = self.displayed_image
            self.after(30, update)

        update()

    def exit_window(self):
        """Tho√°t v·ªÅ menu ch√≠nh"""
        self.stop()
        self.destroy()

class SearchWindow(tk.Toplevel):
    """T√¨m xe theo bi·ªÉn s·ªë: hi·ªán ·∫£nh xe + th·ªùi gian v√†o/ra + ph√≠"""
    def __init__(self, master):
        super().__init__(master)
        self.title("üîç T√¨m xe theo bi·ªÉn s·ªë")
        self.geometry("900x750")
        self.resizable(False, False)
        self.configure(bg="#f0f4f7")
        self.create_widgets()

    def create_widgets(self):
        # Thanh t√¨m ki·∫øm
        frame = tk.Frame(self, padx=10, pady=10, bg="#f0f4f7")
        frame.pack(fill="x")

        tk.Label(frame, text="Nh·∫≠p bi·ªÉn s·ªë:", bg="#f0f4f7",
                 font=("Arial", 11, "bold")).grid(row=0, column=0, sticky="w")
        self.plate_var = tk.StringVar()
        tk.Entry(frame, textvariable=self.plate_var, width=30,
                 font=("Arial", 11)).grid(row=0, column=1, sticky="w", padx=5)
        tk.Button(frame, text="üîç T√¨m", command=self.search, bg="#2196F3", fg="white",
                  font=("Arial", 10, "bold"), padx=10, pady=4).grid(row=0, column=2, padx=8)

        # Th√¥ng tin xe
        info_frame = tk.LabelFrame(self, text="Th√¥ng tin xe", padx=10, pady=10,
                                   bg="#ffffff", font=("Arial", 11, "bold"))
        info_frame.pack(fill="x", padx=10, pady=10)

        self.info_text = tk.Label(info_frame, text="K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...",
                                  anchor="w", justify="left", bg="#ffffff", font=("Arial", 11))
        self.info_text.pack(fill="x")

        # ·∫¢nh xe v√† bi·ªÉn s·ªë
        imgs = tk.Frame(self, bg="#f0f4f7")
        imgs.pack(fill="both", expand=True, padx=10, pady=10)

        # Placeholder cho ·∫£nh xe
        ph_vehicle = ImageTk.PhotoImage(Image.new("RGB", (500, 350), color="gray"))
        self.vehicle_img_label = tk.Label(imgs, image=ph_vehicle, bg="#cccccc")
        self.vehicle_img_label.imgtk = ph_vehicle
        self.vehicle_img_label.grid(row=0, column=0, padx=8)

        # Placeholder cho ·∫£nh bi·ªÉn s·ªë
        ph_plate = ImageTk.PhotoImage(Image.new("RGB", (500, 350), color="gray"))
        self.plate_img_label = tk.Label(imgs, image=ph_plate, bg="#cccccc")
        self.plate_img_label.imgtk = ph_plate
        self.plate_img_label.grid(row=0, column=1, padx=8)

        # N√∫t tho√°t
        tk.Button(self, text="‚ùå Tho√°t", command=self.destroy, bg="#E53935", fg="white",
                  font=("Arial", 11, "bold"), padx=15, pady=6).pack(pady=8)

    def search(self):
        plate = self.plate_var.get().strip()
        if not plate:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Nh·∫≠p bi·ªÉn s·ªë c·∫ßn t√¨m")
            return

        try:
            row = find_vehicle_by_plate(plate)   # H√†m n√†y c√≥ s·∫µn trong database.py
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("L·ªói DB", f"L·ªói khi truy v·∫•n DB:\n{e}")
            return

        if not row:
            messagebox.showinfo("Kh√¥ng t√¨m th·∫•y", f"Kh√¥ng c√≥ b·∫£n ghi cho bi·ªÉn s·ªë: {plate}")
            return

        try:
            plate_number = row["license_plate"]
            entry_time = row["time_in"].strftime("%d/%m/%Y %H:%M:%S") if row["time_in"] else "Kh√¥ng c√≥"
            exit_time = row["time_out"].strftime("%d/%m/%Y %H:%M:%S") if row["time_out"] else "Ch∆∞a ra"
            fee = f"{row['fee']:,.0f} VND" if row["fee"] else "Ch∆∞a t√≠nh"
            vimg_path = row.get("vehicle_img_path")
            pimg_path = row.get("plate_img_path")
        except Exception:
            self.info_text.config(text=f"T√¨m ƒë∆∞·ª£c: {row}")
            return

        # Hi·ªÉn th·ªã th√¥ng tin
        info = (
            f"‚è∞ Th·ªùi gian v√†o: {entry_time}\n"
            f"‚è∞ Th·ªùi gian ra: {exit_time}\n"
            f"üöó Bi·ªÉn s·ªë xe: {plate_number}\n"
            f"üí∞ Ph√≠: {fee}"
        )
        self.info_text.config(text=info)

        # Hi·ªán ·∫£nh xe
        if vimg_path and os.path.exists(vimg_path):
            try:
                vimg = Image.open(vimg_path).resize((400, 300))
                self.vehicle_img_label.imgtk = ImageTk.PhotoImage(vimg)
                self.vehicle_img_label.config(image=self.vehicle_img_label.imgtk)
            except Exception as e:
                print("L·ªói ·∫£nh xe:", e)

        # Hi·ªán ·∫£nh bi·ªÉn s·ªë
        if pimg_path and os.path.exists(pimg_path):
            try:
                pimg = Image.open(pimg_path).resize((400, 300))
                self.plate_img_label.imgtk = ImageTk.PhotoImage(pimg)
                self.plate_img_label.config(image=self.plate_img_label.imgtk)
            except Exception as e:
                print("L·ªói ·∫£nh bi·ªÉn s·ªë:", e)



if __name__ == "__main__":
    app = MainApp()
    app.mainloop()
