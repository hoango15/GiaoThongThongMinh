import mysql.connector
from datetime import datetime
import math

# ================== K·∫æT N·ªêI ==================
def get_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",        # ƒë·ªïi user n·∫øu kh√°c
        password="",        # nh·∫≠p m·∫≠t kh·∫©u MySQL c·ªßa b·∫°n
        database="parking_system"
    )

# ================== CONFIG ==================
def can_vehicle_enter():
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT max_capacity, current_count FROM config LIMIT 1")
    max_cap, cur_count = cur.fetchone()
    cur.close(); conn.close()
    return cur_count < max_cap

def get_current_count():
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT current_count FROM config LIMIT 1")
    count, = cur.fetchone()
    cur.close(); conn.close()
    return count

# ================== XE V√ÄO ==================
def insert_vehicle(plate, ticket_code, vehicle_type, vehicle_img_in, plate_img_in):
    """
    Th√™m xe v√†o DB + c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng xe hi·ªán t·∫°i.
    """
    conn = get_connection()
    cur = conn.cursor()
    sql = """INSERT INTO vehicles 
             (license_plate, ticket_code, vehicle_type, time_in, vehicle_img_in_path, plate_img_in_path)
             VALUES (%s, %s, %s, %s, %s, %s)"""
    cur.execute(sql, (plate, ticket_code, vehicle_type, datetime.now(), vehicle_img_in, plate_img_in))

    # tƒÉng s·ªë l∆∞·ª£ng xe hi·ªán t·∫°i
    cur.execute("UPDATE config SET current_count = current_count + 1 WHERE id=1")

    conn.commit()
    cur.close(); conn.close()

# ================== XE RA ==================
def update_vehicle_exit(ticket_code, vehicle_img_out=None, plate_img_out=None):
    """
    C·∫≠p nh·∫≠t xe ra + t√≠nh ph√≠ t·ª± ƒë·ªông theo lo·∫°i xe + l∆∞u ·∫£nh ra + gi·∫£m s·ªë l∆∞·ª£ng xe.
    """
    conn = get_connection()
    cur = conn.cursor(dictionary=True)

    # L·∫•y th√¥ng tin xe
    cur.execute("SELECT time_in, vehicle_type FROM vehicles WHERE ticket_code=%s AND time_out IS NULL", (ticket_code,))
    row = cur.fetchone()
    if not row:
        cur.close(); conn.close()
        raise Exception("‚ùå Kh√¥ng t√¨m th·∫•y xe ho·∫∑c xe ƒë√£ ra")

    time_in = row["time_in"]
    vehicle_type = row["vehicle_type"]
    time_out = datetime.now()

    # T√≠nh s·ªë gi·ªù g·ª≠i (l√†m tr√≤n l√™n)
    diff_hours = (time_out - time_in).total_seconds() / 3600
    diff_hours = math.ceil(diff_hours)

    # Quy t·∫Øc t√≠nh ph√≠
    if vehicle_type == "Xe m√°y":
        if diff_hours <= 24:
            fee = 10000
        else:
            fee = 50000

    elif vehicle_type == "√î t√¥":
        if diff_hours <= 24:
            fee = 50000
        else:
            fee = diff_hours * 20000

    elif vehicle_type == "Xe t·∫£i tr·ªçng l·ªõn":
        fee = diff_hours * 10000

    else:
        fee = 0  # fallback n·∫øu lo·∫°i xe kh√¥ng h·ª£p l·ªá

    # C·∫≠p nh·∫≠t DB: th√™m ·∫£nh xe ra
    cur.execute("""
        UPDATE vehicles 
        SET time_out=%s, fee=%s, vehicle_img_out_path=%s, plate_img_out_path=%s
        WHERE ticket_code=%s
    """, (time_out, fee, vehicle_img_out, plate_img_out, ticket_code))

    # gi·∫£m s·ªë l∆∞·ª£ng xe ƒëang g·ª≠i
    cur.execute("UPDATE config SET current_count = current_count - 1 WHERE id=1 AND current_count > 0")

    conn.commit()
    cur.close(); conn.close()
    return fee

# ================== TRA C·ª®U ==================
def find_vehicle_by_ticket(ticket_code):
    conn = get_connection()
    cur = conn.cursor(dictionary=True)
    cur.execute("SELECT * FROM vehicles WHERE ticket_code=%s", (ticket_code,))
    row = cur.fetchone()
    cur.close(); conn.close()
    return row

def find_vehicle_by_plate(plate):
    conn = get_connection()
    cur = conn.cursor(dictionary=True)
    cur.execute("""
        SELECT * FROM vehicles 
        WHERE license_plate=%s 
        ORDER BY time_in DESC 
        LIMIT 1
    """, (plate,))
    row = cur.fetchone()
    cur.close(); conn.close()
    return row

def pretty_vehicle_info(vehicle):
    if not vehicle:
        return "‚ùå Kh√¥ng t√¨m th·∫•y xe"
    
    return f"""
    üöó Bi·ªÉn s·ªë: {vehicle['license_plate']}
    üé´ M√£ v√©: {vehicle['ticket_code']}
    Lo·∫°i xe: {vehicle['vehicle_type']}
    ‚è∞ Gi·ªù v√†o: {vehicle['time_in'].strftime('%d/%m/%Y %H:%M:%S')}
    ‚è∞ Gi·ªù ra: {vehicle['time_out'].strftime('%d/%m/%Y %H:%M:%S') if vehicle['time_out'] else 'Ch∆∞a ra'}
    üí∞ Ph√≠: {vehicle['fee'] if vehicle['fee'] else 'Ch∆∞a t√≠nh'}
    """.strip()
